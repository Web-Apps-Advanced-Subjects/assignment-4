/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as HomeLayoutImport } from './routes/_home/layout'
import { Route as HomeProfileImport } from './routes/_home/profile'
import { Route as HomeHomeImport } from './routes/_home/home'
import { Route as HomeUsersUserIDImport } from './routes/_home/users_/$userID'
import { Route as HomePostsPostIDImport } from './routes/_home/posts_/$postID'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const HomeLayoutRoute = HomeLayoutImport.update({
  id: '/_home',
  getParentRoute: () => rootRoute,
} as any)

const HomeProfileRoute = HomeProfileImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => HomeLayoutRoute,
} as any)

const HomeHomeRoute = HomeHomeImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => HomeLayoutRoute,
} as any)

const HomeUsersUserIDRoute = HomeUsersUserIDImport.update({
  id: '/users_/$userID',
  path: '/users/$userID',
  getParentRoute: () => HomeLayoutRoute,
} as any)

const HomePostsPostIDRoute = HomePostsPostIDImport.update({
  id: '/posts_/$postID',
  path: '/posts/$postID',
  getParentRoute: () => HomeLayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_home': {
      id: '/_home'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof HomeLayoutImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/_home/home': {
      id: '/_home/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeHomeImport
      parentRoute: typeof HomeLayoutImport
    }
    '/_home/profile': {
      id: '/_home/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof HomeProfileImport
      parentRoute: typeof HomeLayoutImport
    }
    '/_home/posts_/$postID': {
      id: '/_home/posts_/$postID'
      path: '/posts/$postID'
      fullPath: '/posts/$postID'
      preLoaderRoute: typeof HomePostsPostIDImport
      parentRoute: typeof HomeLayoutImport
    }
    '/_home/users_/$userID': {
      id: '/_home/users_/$userID'
      path: '/users/$userID'
      fullPath: '/users/$userID'
      preLoaderRoute: typeof HomeUsersUserIDImport
      parentRoute: typeof HomeLayoutImport
    }
  }
}

// Create and export the route tree

interface HomeLayoutRouteChildren {
  HomeHomeRoute: typeof HomeHomeRoute
  HomeProfileRoute: typeof HomeProfileRoute
  HomePostsPostIDRoute: typeof HomePostsPostIDRoute
  HomeUsersUserIDRoute: typeof HomeUsersUserIDRoute
}

const HomeLayoutRouteChildren: HomeLayoutRouteChildren = {
  HomeHomeRoute: HomeHomeRoute,
  HomeProfileRoute: HomeProfileRoute,
  HomePostsPostIDRoute: HomePostsPostIDRoute,
  HomeUsersUserIDRoute: HomeUsersUserIDRoute,
}

const HomeLayoutRouteWithChildren = HomeLayoutRoute._addFileChildren(
  HomeLayoutRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof HomeLayoutRouteWithChildren
  '/login': typeof LoginRoute
  '/home': typeof HomeHomeRoute
  '/profile': typeof HomeProfileRoute
  '/posts/$postID': typeof HomePostsPostIDRoute
  '/users/$userID': typeof HomeUsersUserIDRoute
}

export interface FileRoutesByTo {
  '': typeof HomeLayoutRouteWithChildren
  '/login': typeof LoginRoute
  '/home': typeof HomeHomeRoute
  '/profile': typeof HomeProfileRoute
  '/posts/$postID': typeof HomePostsPostIDRoute
  '/users/$userID': typeof HomeUsersUserIDRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_home': typeof HomeLayoutRouteWithChildren
  '/login': typeof LoginRoute
  '/_home/home': typeof HomeHomeRoute
  '/_home/profile': typeof HomeProfileRoute
  '/_home/posts_/$postID': typeof HomePostsPostIDRoute
  '/_home/users_/$userID': typeof HomeUsersUserIDRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/login'
    | '/home'
    | '/profile'
    | '/posts/$postID'
    | '/users/$userID'
  fileRoutesByTo: FileRoutesByTo
  to: '' | '/login' | '/home' | '/profile' | '/posts/$postID' | '/users/$userID'
  id:
    | '__root__'
    | '/_home'
    | '/login'
    | '/_home/home'
    | '/_home/profile'
    | '/_home/posts_/$postID'
    | '/_home/users_/$userID'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  HomeLayoutRoute: typeof HomeLayoutRouteWithChildren
  LoginRoute: typeof LoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  HomeLayoutRoute: HomeLayoutRouteWithChildren,
  LoginRoute: LoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_home",
        "/login"
      ]
    },
    "/_home": {
      "filePath": "_home/layout.tsx",
      "children": [
        "/_home/home",
        "/_home/profile",
        "/_home/posts_/$postID",
        "/_home/users_/$userID"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/_home/home": {
      "filePath": "_home/home.tsx",
      "parent": "/_home"
    },
    "/_home/profile": {
      "filePath": "_home/profile.tsx",
      "parent": "/_home"
    },
    "/_home/posts_/$postID": {
      "filePath": "_home/posts_/$postID.tsx",
      "parent": "/_home"
    },
    "/_home/users_/$userID": {
      "filePath": "_home/users_/$userID.tsx",
      "parent": "/_home"
    }
  }
}
ROUTE_MANIFEST_END */
